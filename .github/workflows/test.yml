on:
  push:
    branches:
      - main
      - staging
      - trying
  pull_request:

name: proj ci
jobs:
  # The `ci-result` job doesn't actually test anything - it just aggregates the
  # overall build status for bors, otherwise our bors.toml would need an entry
  # for each individual job produced by the job-matrix.
  #
  # Ref: https://github.com/rust-lang/crater/blob/9ab6f9697c901c4a44025cf0a39b73ad5b37d198/.github/workflows/bors.yml#L125-L149
  #
  # ALL THE SUBSEQUENT JOBS NEED THEIR `name` ADDED TO THE `needs` SECTION OF THIS JOB!
  ci-result:
    name: ci result
    runs-on: ubuntu-latest
    needs:
      # - proj-ubuntu
      - proj-sys-ubuntu
      # - proj-macos
      # - proj-sys-macos
    steps:
      - name: Mark the job as a success
        if: success()
        run: exit 0
      - name: Mark the job as a failure
        if: "!success()"
        run: exit 1

  proj-sys-ubuntu:
    name: proj-sys ubuntu
    runs-on: ubuntu-latest
    defaults:
    run:
      working-directory: proj-sys
    steps:
      - uses: actions/checkout@v3

      - name: Cache libproj
        uses: actions/cache@v3
        env:
          cache-name: cache-libproj-build
          proj-archive: 9.1.0.tar.gz
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/libproj-build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.proj-archive }}

    - if: ${{ steps.cache-libprojbuild.outputs.cache-hit != 'true' }}
        name: build libproj
        run: |
          cd PROJSRC
          tar -xzvf proj-9.1.0.tar.gz
          mv proj-9.1.0 proj-src
          cd proj-src
          mkdir build
          cmake .. -DCMAKE_INSTALL_PREFIX=~/libproj-build
          cmake --build . --target install -j $(nproc)

    - name: install system proj
      run: |
        cp -r ~/libproj-build/ /usr

    - name:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: test
